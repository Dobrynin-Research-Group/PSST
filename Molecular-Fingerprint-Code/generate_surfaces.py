import collections
import numpy as np
import pandas as pd
from scipy import interpolate
from generate_data import generate_grid

Bin = collections.namedtuple('Bin', ['min', 'max', 'num_bins'])

def generate_surface_bins(): # Maybe make this a text file? Like a json?
    """
    Define parameters to create (Nw, phi, eta_sp) surfaces. Adjust these parameters to tune the surfaces.
    
        Arguments:
            None

        Returns:
            Parameters: (dict) Dictionary of tuples. Number of bins [0], minimum bin [1] and maximum bin [2] for each coordinate of Nw, phi, and eta_sp
    """

    nw_num_bins = 20
    nw_min = 10
    nw_max = 300000

    phi_num_bins = 40
    phi_min = 0.000001
    phi_max = 0.1

    eta_sp_num_bins = 40
    eta_sp_min = 1.0
    eta_sp_max = 1.5e15

    bins = {}
    bins['Nw'] = Bin(nw_min, nw_max, nw_num_bins)
    bins['phi'] = Bin(phi_min, phi_max, phi_num_bins)
    bins['eta_sp'] = Bin(eta_sp_min, eta_sp_max, eta_sp_num_bins)

    return bins

def bin_data(df, bins, Bg, Bth):
    """
    Create a grid of specific viscosity vs (Nw, phi) for each value of Bg, Bth, and Pe
    
        Arguments:
            df: (DataFrame) DataFrame generated by generate_data.py
            bins: (Dictionary) Input parameters that determine bounds of (Nw, phi, eta_sp) space and number of bins in each dimension
            Bg: (float) B-parameter in good regime
            Bth: (float) B-parameter in theta regime
        Returns:
            None
    """
    df2 = df.copy()
   
    df2['Nw'] = (df2['Nw']-bins['Nw'].min)/(bins['Nw'].max-bins['Nw'].min)
    df2['phi'] = (df2['phi']-bins['phi'].min)/(bins['phi'].max-bins['phi'].min)
    df2['eta_sp'] = (df2['eta_sp']-bins['eta_sp'].min)/(bins['eta_sp'].max-bins['eta_sp'].min)

    path1 = 'grid_data/'
    for k in np.unique(df2['Pe']):
        test_data = df2[(df2['Bg']==Bg) & (df2['Bth']==Bth) & (df2['Pe']==k)]
        x = test_data['Nw']
        y = test_data['phi']
        z = test_data['eta_sp']
        xplotv = np.linspace(*bins['Nw'])
        yplotv = np.linspace(*bins['phi'])
        xplot, yplot = np.meshgrid(xplotv, yplotv)
        zgriddata = interpolate.griddata(
            np.array([x.ravel(),y.ravel()]).T,
            z.ravel(),
            np.array([xplot.ravel(),yplot.ravel()]).T,
            method='linear',
            fill_value=0
            )
        data_save = zgriddata.reshape(bins['phi'].num_bins,bins['Nw'].num_bins)
        np.savetxt(f'{path1}Bg_{Bg}_Bth_{Bth}_Pe_{k}.txt', data_save)

# Main
def main():
    grid = generate_grid()
    bins = generate_surface_bins()
    for a in grid['Bg']:
        for b in grid['Bth']:
            df = pd.read_csv(f"generated_data\dataset_{a}_{b}.csv")
            bin_data(df, bins, a, b)

if __name__ == '__main__':
    main()