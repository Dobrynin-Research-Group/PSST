import numpy as np
import pandas as pd
from scipy import interpolate
from generate_data import generate_grid

def generate_surface_params():
    """
    Define parameters to create (Nw, phi, eta_sp) surfaces. Adjust these parameters to tune the surfaces.
    
        Arguments:
            None

        Returns:
            Parameters: (dict) Dictionary of tuples. Number of bins [0], minimum bin [1] and maximum bin [2] for each coordinate of Nw, phi, and eta_sp
    """

    nw_num_bins = 20
    nw_min = 10
    nw_max = 300000

    phi_num_bins = 40
    phi_min = 0.000001
    phi_max = 0.1

    eta_sp_num_bins = 40
    eta_sp_min = 1.0
    eta_sp_max = 1.5e15

    bin_params = {}
    bin_params['Nw'] = (nw_num_bins, nw_min, nw_max)
    bin_params['phi'] = (phi_num_bins, phi_min, phi_max)
    bin_params['eta_sp'] = (eta_sp_num_bins, eta_sp_min, eta_sp_max)

    return bin_params

def bin_data(df, params, Bg, Bth):
    """
    Create a grid of specific viscosity vs (Nw, phi) for each value of Bg, Bth, and Pe
    
        Arguments:
            df: (DataFrame) DataFrame generated by generate_data.py
            params: (Dictionary) Input parameters that determine bounds of (Nw, phi, eta_sp) space and number of bins in each dimension
            Bg: (float) B-parameter in good regime
            Bth: (float) B-parameter in theta regime
        Returns:
            None
    """
    df2 = df.copy()
   
    df2['Nw'] = (df2['Nw']-params['Nw'][1])/(params['Nw'][2]-params['Nw'][1])
    df2['phi'] = (df2['phi']-params['phi'][1])/(params['phi'][2]-params['phi'][1])
    df2['eta_sp'] = (df2['eta_sp']-params['eta_sp'][1])/(params['eta_sp'][2]-params['eta_sp'][1])

    nw_bin_loc = np.linspace(0, 1, params['Nw'][0])
    phi_bin_loc = np.linspace(0, 1, params['phi'][0])
    eta_sp_bin_loc = np.linspace(0, 1, params['eta_sp'][0])

    master_bin_arr = np.zeros([len(phi_bin_loc)*len(nw_bin_loc)*len(eta_sp_bin_loc),3])

    counter = 0
    for i in nw_bin_loc:
        for j in phi_bin_loc:
            for k in eta_sp_bin_loc:
                master_bin_arr[counter] = i,j,k
                counter = counter + 1

    path1 = 'grid_data/'
    for k in np.unique(df2['Pe']):
        test_data = df2[(df2['Bg']==Bg) & (df2['Bth']==Bth) & (df2['Pe']==k)]
        x = test_data['Nw']
        y = test_data['phi']
        z = test_data['eta_sp']
        xplotv = np.linspace(x.min(),x.max(), params['Nw'][0])
        yplotv = np.linspace(y.min(), y.max(), params['phi'][0])
        xplot, yplot = np.meshgrid(xplotv, yplotv)
        xnew = nw_bin_loc
        ynew = phi_bin_loc
        zgriddata = interpolate.griddata(np.array([x.ravel(),y.ravel()]).T,z.ravel(),np.array([xplot.ravel(),yplot.ravel()]).T,method='linear',fill_value=0)
        data_save = zgriddata.reshape(params['phi'][0],params['Nw'][0])
        np.savetxt(f'{path1}Bg_{Bg}_Bth_{Bth}_Pe_{k}.txt', data_save)

# Main
def main():
    grid = generate_grid()
    params = generate_surface_params()
    for a in grid['Bg']:
        for b in grid['Bth']:
            df = pd.read_csv(f"generated_data\dataset_{a}_{b}.csv")
            bin_data(df, params)

if __name__ == '__main__':
    main()